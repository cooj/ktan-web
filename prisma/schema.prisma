generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["relationJoins"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Admin {
    id        Int      @id @default(autoincrement())
    account   String?  @unique @db.VarChar(50)
    username  String?  @db.VarChar(30)
    password  String?  @db.VarChar(255)
    avatar    String?  @db.VarChar(255)
    status    Int?     @default(1)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("admin")
}

model Company {
    id              Int      @id @default(autoincrement())
    company         String   @db.VarChar(100)
    address         String?  @db.VarChar(200)
    logo            String?  @db.VarChar(255)
    logo2           String?  @db.VarChar(255)
    qr_code         String?  @db.VarChar(255)
    phone           String?  @db.VarChar(20)
    email           String?  @db.VarChar(50)
    seo_keyword     String?  @db.VarChar(100)
    seo_description String?  @db.VarChar(200)
    copyright       String?  @db.VarChar(200)
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @updatedAt @map("updated_at")
    filing          String?  @db.VarChar(100)

    @@map("company")
}

model System {
    id          Int      @id @default(autoincrement())
    title       String?  @db.VarChar(100)
    address     String?  @db.VarChar(200)
    logo        String?  @db.VarChar(255)
    logo2       String?  @db.VarChar(255)
    qrCode      String?  @map("qr_code") @db.VarChar(255)
    phone       String?  @db.VarChar(20)
    email       String?  @db.VarChar(50)
    keyword     String?  @db.VarChar(100)
    description String?  @db.VarChar(200)
    filing      String?  @db.VarChar(100)
    copyright   String?  @db.VarChar(200)
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    icon        String?  @db.VarChar(255)

    @@map("system")
}

model Menu {
    id        Int      @id @default(autoincrement())
    p_id      Int?     @default(0)
    icon      String?  @db.VarChar(50)
    sort      Int?     @default(0)
    title     String?  @db.VarChar(100)
    title_en  String?  @db.VarChar(100)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    href      String?  @db.VarChar(200)
    status    Int?     @default(1)
    is_goods  Int?     @default(0)

    parent   Menu?  @relation("ChildToParent", fields: [p_id], references: [id])
    children Menu[] @relation("ChildToParent")

    // @@index([p_id], map: "menu_p_id_fkey")
    @@map("menu")
}

model News {
    id          Int      @id @default(autoincrement())
    title       String?  @db.VarChar(100)
    title_en    String?  @db.VarChar(100)
    author      String?  @db.VarChar(100)
    describe    String?  @db.VarChar(200)
    describe_en String?  @db.VarChar(200)
    content     String?  @db.Text
    content_en  String?  @db.Text
    img         String?  @db.VarChar(255)
    sort        Int?     @default(0)
    type        Int      @default(0)
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    isHide      Boolean? @default(false)
    read        Int?     @default(0)

    @@map("news")
}

model Product {
    id           Int       @id @default(autoincrement())
    title        String?   @db.VarChar(100)
    title_en     String?   @db.VarChar(100)
    sub_title    String?   @db.VarChar(100)
    sub_title_en String?   @db.VarChar(100)
    author       String?   @db.VarChar(100)
    describe     String?   @db.Text // 描述
    describe_en  String?   @db.Text
    content      String?   @db.Text // 内容
    content_en   String?   @db.Text
    contrast     String?   @db.Text // 规格对比
    contrast_en  String?   @db.Text
    annex        String?   @db.Text // 包装附件
    annex_en     String?   @db.Text
    img          String?   @db.VarChar(255)
    sort         Int?      @default(0)
    isHide       Boolean?  @default(false)
    type         Int       @default(0)
    read         Int?      @default(0)
    createdAt    DateTime  @default(now()) @map("created_at")
    updatedAt    DateTime  @updatedAt @map("updated_at")
    Classify     Classify? @relation(fields: [classifyId], references: [id])
    classifyId   Int?

    links Link[]

    @@map("product")
}

model Link {
    id         Int      @id @default(autoincrement())
    c_id       Int?     @default(0) // 关联id
    title      String?  @db.VarChar(100)
    title_en   String?  @db.VarChar(100)
    content    String?  @db.Text
    content_en String?  @db.Text
    img        String?  @db.VarChar(255)
    href       String?  @db.VarChar(255)
    sort       Int?     @default(0)
    type       Int?     @default(1) // 1：商品图片，2：商品下载文件，3：视频文件，4：软件,5:轮播图
    isHide     Boolean  @default(false)
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")
    Product    Product? @relation(fields: [productId], references: [id])
    productId  Int?

    @@map("link")
}

model Other {
    id         Int      @id @default(autoincrement())
    title      String?  @db.VarChar(100)
    title_en   String?  @db.VarChar(100)
    img        String?  @db.VarChar(255)
    content    String?  @db.Text
    content_en String?  @db.Text
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")
    type       Int      @unique @default(0)

    @@map("other")
}

model Classify {
    id       Int     @id @default(autoincrement())
    p_id     Int?    @default(0)
    title    String? @db.VarChar(100)
    title_en String? @db.VarChar(100)

    // img        String?  @db.VarChar(255)
    // content    String?  @db.Text
    // content_en String?  @db.Text
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    sort   Int? @default(0)
    status Int? @default(1)

    parent   Classify?  @relation("ChildToParent", fields: [p_id], references: [id])
    children Classify[] @relation("ChildToParent")

    products Product[] // 这里需要定义成一对多的关系，因为一个分类下可以有多个产品

    @@map("classify")
}
